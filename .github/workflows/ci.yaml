trigger:
  branches:
    include:
      - main

variables:
  acrName: myacr.azurecr.io
  namespace: onetouch

  backendImage: backend
  frontendImage: frontend
  backendTag: $(Build.BuildId)
  frontendTag: $(Build.BuildId)

stages:
  # ============================
  # Backend Build + Test + Scan
  # ============================
  - stage: Backend
    jobs:
      - job: Backend
        pool:
          vmImage: ubuntu-latest
        steps:
          - task: NodeTool@0
            inputs:
              versionSpec: '18.x'

          - script: |
              cd backend
              npm install
              npm test
            displayName: "Install & Test Backend"

          - script: |
              npx eslint . || true
            displayName: "Run ESLint (SAST) - Backend"

          - task: Docker@2
            inputs:
              command: buildAndPush
              repository: $(backendImage)
              dockerfile: backend/Dockerfile
              containerRegistry: $(acrName)
              tags: |
                $(backendTag)

          - script: |
              curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh
              ./trivy image --severity HIGH,CRITICAL $(acrName)/$(backendImage):$(backendTag) || true
            displayName: "Trivy Scan Backend Image"

  # ============================
  # Frontend Build + Scan
  # ============================
  - stage: Frontend
    jobs:
      - job: Frontend
        pool:
          vmImage: ubuntu-latest
        steps:
          - task: NodeTool@0
            inputs:
              versionSpec: '18.x'

          - script: |
              cd frontend
              npm install
              npm run build
            displayName: "Build Frontend"

          - script: |
              npx eslint . || true
            displayName: "Run ESLint (SAST) - Frontend"

          - task: Docker@2
            inputs:
              command: buildAndPush
              repository: $(frontendImage)
              dockerfile: frontend/Dockerfile
              containerRegistry: $(acrName)
              tags: |
                $(frontendTag)

          - script: |
              curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh
              ./trivy image --severity HIGH,CRITICAL $(acrName)/$(frontendImage):$(frontendTag) || true
            displayName: "Trivy Scan Frontend Image"

  # ============================
  # Deploy with Canary
  # ============================
  - stage: Deploy
    dependsOn: [Backend, Frontend]
    jobs:
      - job: Deploy
        pool:
          vmImage: ubuntu-latest
        steps:
          - script: |
              kubectl config use-context $(KUBE_CONTEXT)

              # Update Canary images
              kubectl set image deployment/backend-canary \
                backend=$(acrName)/$(backendImage):$(backendTag) -n $(namespace)

              kubectl set image deployment/frontend-canary \
                frontend=$(acrName)/$(frontendImage):$(frontendTag) -n $(namespace)

              # If ArgoCD GitOps is used
              argocd app sync frontend-app || true
              argocd app sync backend-app || true
            displayName: "Deploy Canary Versions"
